// Generated by CoffeeScript 1.11.0
var Event, EventEmitter, EventSystem, typeChecker,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty,
  slice = [].slice;

EventEmitter = require('events').EventEmitter;

typeChecker = require('typechecker');

Event = (function() {
  Event.prototype.name = null;

  Event.prototype.locked = false;

  Event.prototype.finished = false;

  function Event(arg) {
    this.name = arg.name;
  }

  return Event;

})();

EventSystem = (function(superClass) {
  extend(EventSystem, superClass);

  function EventSystem() {
    return EventSystem.__super__.constructor.apply(this, arguments);
  }

  EventSystem.prototype._eventSystemEvents = null;

  EventSystem.prototype.event = function(eventName) {
    var base;
    this._eventSystemEvents || (this._eventSystemEvents = {});
    return (base = this._eventSystemEvents)[eventName] || (base[eventName] = new Event(eventName));
  };

  EventSystem.prototype.lock = function(eventName, next) {
    var err, event;
    event = this.event(eventName);
    if (event.locked === false) {
      event.locked = true;
      try {
        this.emit(eventName + ':locked');
      } catch (error) {
        err = error;
        next(err);
        return this;
      } finally {
        next();
      }
    } else {
      this.onceUnlocked(eventName, (function(_this) {
        return function(err) {
          if (err) {
            return next(err);
          }
          return _this.lock(eventName, next);
        };
      })(this));
    }
    return this;
  };

  EventSystem.prototype.unlock = function(eventName, next) {
    var err, event;
    event = this.event(eventName);
    event.locked = false;
    try {
      this.emit(eventName + ':unlocked');
    } catch (error) {
      err = error;
      next(err);
      return this;
    } finally {
      next();
    }
    return this;
  };

  EventSystem.prototype.start = function(eventName, next) {
    this.lock(eventName, (function(_this) {
      return function(err) {
        var event;
        if (err) {
          return next(err);
        }
        event = _this.event(eventName);
        event.finished = false;
        try {
          return _this.emit(eventName + ':started');
        } catch (error) {
          err = error;
          next(err);
          return _this;
        } finally {
          next();
        }
      };
    })(this));
    return this;
  };

  EventSystem.prototype.finish = function() {
    var args;
    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    return this.finished.apply(this, args);
  };

  EventSystem.prototype.finished = function(eventName, next) {
    var event;
    event = this.event(eventName);
    event.finished = true;
    this.unlock(eventName, (function(_this) {
      return function(err) {
        if (err) {
          return next(err);
        }
        try {
          return _this.emit(eventName + ':finished');
        } catch (error) {
          err = error;
          next(err);
          return _this;
        } finally {
          next();
        }
      };
    })(this));
    return this;
  };

  EventSystem.prototype.onceUnlocked = function(eventName, next) {
    var event;
    event = this.event(eventName);
    if (event.locked) {
      this.once(eventName + ':unlocked', next);
    } else {
      next();
    }
    return this;
  };

  EventSystem.prototype.onceFinished = function(eventName, next) {
    var event;
    event = this.event(eventName);
    if (event.finished) {
      next();
    } else {
      this.once(eventName + ':finished', next);
    }
    return this;
  };

  EventSystem.prototype.whenFinished = function(eventName, next) {
    var event;
    event = this.event(eventName);
    if (event.finished) {
      next();
    }
    this.on(eventName + ':finished', next);
    return this;
  };

  EventSystem.prototype.when = function() {
    var args;
    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    return this.on.apply(this, args);
  };

  EventSystem.prototype.block = function(eventNames, next) {
    var done, err, eventName, i, len, total;
    if (!typeChecker.isArray(eventNames)) {
      if (typeChecker.isString(eventNames)) {
        eventNames = eventNames.split(/[,\s]+/g);
      } else {
        err = new Error('Unknown eventNames type');
        return next(err);
      }
    }
    total = eventNames.length;
    done = 0;
    for (i = 0, len = eventNames.length; i < len; i++) {
      eventName = eventNames[i];
      this.lock(eventName, function(err) {
        if (err) {
          done = total;
          return next(err);
        }
        done++;
        if (done === total) {
          return next();
        }
      });
    }
    return this;
  };

  EventSystem.prototype.unblock = function(eventNames, next) {
    var done, err, eventName, i, len, total;
    if (!typeChecker.isArray(eventNames)) {
      if (typeChecker.isString(eventNames)) {
        eventNames = eventNames.split(/[,\s]+/g);
      } else {
        err = new Error('Unknown eventNames type');
        return next(err);
      }
    }
    total = eventNames.length;
    done = 0;
    for (i = 0, len = eventNames.length; i < len; i++) {
      eventName = eventNames[i];
      this.unlock(eventName, function(err) {
        if (err) {
          done = total;
          return next(err);
        }
        done++;
        if (done === total) {
          return next();
        }
      });
    }
    return this;
  };

  return EventSystem;

})(EventEmitter);

module.exports = {
  Event: Event,
  EventSystem: EventSystem
};
